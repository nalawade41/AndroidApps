package common.base.app.farmerfriend.Database;

import java.util.ArrayList;
import java.util.List;

import common.base.app.farmerfriend.Classes.DTO.*;
import common.base.app.farmerfriend.DALC.*;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

public class DatabaseExecuter implements ITableDefination {

	private DatabaseHelper _dataBaseHelper ;
	
	public DatabaseExecuter (Context context){
		_dataBaseHelper = new DatabaseHelper(context);
	}
	
	public static void createTables(SQLiteDatabase db) {
		db.execSQL(CREATE_TABLE_LOCATIONS);
		db.execSQL(CREATE_TABLE_LOCATION_TYPE);
		db.execSQL(CREATE_TABLE_WEATHER_DETAILS);
		db.execSQL(CREATE_TABLE_WEATHEER_TYPE);
		db.execSQL(CREATE_TABLE_WEATHER_CONDITION_CODES);
	}

	public static void dropTables(SQLiteDatabase db) {
		db.execSQL("DROP TABLE IF EXISTS " + CREATE_TABLE_LOCATIONS);
		db.execSQL("DROP TABLE IF EXISTS " + CREATE_TABLE_LOCATION_TYPE);
		db.execSQL("DROP TABLE IF EXISTS " + CREATE_TABLE_WEATHER_DETAILS);
		db.execSQL("DROP TABLE IF EXISTS " + CREATE_TABLE_WEATHEER_TYPE);
		db.execSQL("DROP TABLE IF EXISTS "
				+ CREATE_TABLE_WEATHER_CONDITION_CODES);
	}

	public long insertTableData(IDatabaseModels rowData, String tableName) {
		if (rowData != null) {
			ContentValues values = new ContentValues();
			if (rowData instanceof LocationDTO) {
				values =  LocationDALC.createContentValuesToInsert((LocationDTO)rowData);
			} else if (rowData instanceof LocationTypeDTO) {
				values =  LocationTypeDALC.createContentValuesToInsert((LocationTypeDTO)rowData);
			} else if (rowData instanceof WeatherDetailsDTO) {
				values =  WeatherDetailsDALC.createContentValuesToInsert((WeatherDetailsDTO)rowData);
			}else if (rowData instanceof WeatherTypeDTO) {
				values =  WeatherTypeDALC.createContentValuesToInsert((WeatherTypeDTO)rowData);
			}else if (rowData instanceof WeatherConditionCodeDTO) {
				values =  WeatherConditionCodeDALC.createContentValuesToInsert((WeatherConditionCodeDTO)rowData);
			}
			return _dataBaseHelper.insertRecord(values, tableName);
		}
		return -1;
	}

	public List<Object> getTableData(String sqlQuery, String tableName){
		Cursor reader = _dataBaseHelper.getRecordData(sqlQuery, tableName);
		if(reader!= null && reader.moveToFirst()){
			
		}
		
		
		if (dataRead != null && dataRead.moveToFirst()) {
			if (tableName.equals(TABLE_LOCATIONS)) {
				dataToReturn = new ArrayList<Object>();
				int locationIDIndex = dataRead.getColumnIndex("LocationID");
				int locationLatiIndex = dataRead
						.getColumnIndex("LocationLatitude");
				int locationNameIndex = dataRead.getColumnIndex("LocationName");
				int locationLongiIndex = dataRead
						.getColumnIndex("LocationLongitude");
				int locationTypeIndex = dataRead
						.getColumnIndex("LocationTypeID");
				int dateAddedIndex = dataRead.getColumnIndex(ADDED_TIME_KEY);
				int geoNameIDIndex = dataRead.getColumnIndex("GeoNameID");
				do {
					Location dataRow = new Location();
					dataRow.setLocationID(dataRead.getInt(locationIDIndex));
					dataRow.setDateAdded(dataRead.getString(dateAddedIndex));
					dataRow.setLocationLatitude(dataRead
							.getDouble(locationLatiIndex));
					dataRow.setLocationLongitude(dataRead
							.getDouble(locationLongiIndex));
					dataRow.setLocationName(dataRead
							.getString(locationNameIndex));
					dataRow.setLocationTypeID(dataRead
							.getInt(locationTypeIndex));
					dataRow.setGeoNameID(dataRead.getString(geoNameIDIndex));
					dataToReturn.add(dataRow);
				} while (dataRead.moveToNext());
			}
			if (tableName.equals(TABLE_LOCATIONTYPES)) {
				dataToReturn = new ArrayList<Object>();
				int locationTypeIDIndex = dataRead
						.getColumnIndex("LocationTypeID");
				int locationTypeIndex = dataRead.getColumnIndex("LocationType");
				int dateAddedIndex = dataRead.getColumnIndex(ADDED_TIME_KEY);
				do {
					LocationType dataRow = new LocationType();
					dataRow.setDateAdded(dataRead.getString(dateAddedIndex));
					dataRow.setLocationTypeID(dataRead
							.getInt(locationTypeIDIndex));
					dataRow.setLocationType(dataRead
							.getString(locationTypeIndex));
					dataToReturn.add(dataRow);
				} while (dataRead.moveToNext());
			}
			if (tableName.equals(TABLE_WEATHER_DETAILS)) {
				dataToReturn = new ArrayList<Object>();
				int locationIDIndex = dataRead.getColumnIndex("LocationID");
				int weatherLocationIDIndex = dataRead
						.getColumnIndex("WeatherLocationID");
				int weatherDetailsIDIndex = dataRead
						.getColumnIndex("WeatherDetailsID");
				int dateAddedIndex = dataRead.getColumnIndex(ADDED_TIME_KEY);
				do {
					WeatherDetail dataRow = new WeatherDetail();
					dataRow.setLocationID(dataRead.getInt(locationIDIndex));
					dataRow.setDateAdded(dataRead.getString(dateAddedIndex));
					dataRow.setWeatherDetailsID(dataRead
							.getInt(weatherDetailsIDIndex));
					dataRow.setWeatherLocationID(dataRead
							.getString(weatherLocationIDIndex));
					dataToReturn.add(dataRow);
				} while (dataRead.moveToNext());
			}
		}
		return dataToReturn;
		return null;
	}

}
