package common.base.app.farmerfriend.Classes.Parser;

import java.io.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import android.util.*;
import common.base.app.farmerfriend.Classes.Result.*;

public class CurrentWeatherParser implements IJsonParser{

	@Override
	public List<IWebResult> readJsonStream(InputStream in) throws IOException {
		JsonReader reader = new JsonReader(new InputStreamReader(in, Encoding));
		try {
			readeWeatherMessagesArray(reader);
		} catch (Exception e) {
			Log.e("error", e.getLocalizedMessage());
			throw new IOException();
		}
		return null;
	}

	private void readeWeatherMessagesArray(JsonReader reader)
			throws IOException {
		reader.beginObject();
		String date;
		IWebResult result = new CurrentWeatherResult();
		while (reader.hasNext()) {
			String name = reader.nextName();
			if (name.equals("sys")) {
				readSunTimeings(reader);
			} else if (name.equals("weather")) {
				readWeatherInfromation(reader);
			} else if (name.equals("base")) {
				reader.skipValue();
			} else if (name.equals("main")) {
				readTempratureInformation(reader);
			} else if (name.equals("wind")) {
				readWindInformation(reader);
			} else if (name.equals("clouds")) {
				readCloudSpeed(reader);
			} else if (name.equals("dt")) {
				date = reader.nextString();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
		List<IWebResult> resultToReturn = new List<IWebResult>() {
			
			@Override
			public <T> T[] toArray(T[] array) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Object[] toArray() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public List<IWebResult> subList(int start, int end) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public int size() {
				// TODO Auto-generated method stub
				return 0;
			}
			
			@Override
			public IWebResult set(int location, IWebResult object) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public boolean retainAll(Collection<?> arg0) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean removeAll(Collection<?> arg0) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean remove(Object object) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public IWebResult remove(int location) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public ListIterator<IWebResult> listIterator(int location) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public ListIterator<IWebResult> listIterator() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public int lastIndexOf(Object object) {
				// TODO Auto-generated method stub
				return 0;
			}
			
			@Override
			public Iterator<IWebResult> iterator() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public boolean isEmpty() {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public int indexOf(Object object) {
				// TODO Auto-generated method stub
				return 0;
			}
			
			@Override
			public IWebResult get(int location) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public boolean containsAll(Collection<?> arg0) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean contains(Object object) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public void clear() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public boolean addAll(int arg0, Collection<? extends IWebResult> arg1) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean addAll(Collection<? extends IWebResult> arg0) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public void add(int location, IWebResult object) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public boolean add(IWebResult object) {
				// TODO Auto-generated method stub
				return false;
			}
		};
	} 

	private void readSunTimeings(JsonReader reader) throws IOException {
		reader.beginObject();
		String sunrise;
		String sunset;
		while (reader.hasNext()) {
			String value = reader.nextName();
			if (value.equals("sunrise")) {
				sunrise = reader.nextString();
			} else if (value.equals("sunset")) {
				sunset = reader.nextString();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
	}

	private void readWeatherInfromation(JsonReader reader) throws IOException {
		reader.beginArray();
		String id;
		String description;
		String main;
		while (reader.hasNext()) {
			reader.beginObject();
			while (reader.hasNext()) {
				String value = reader.nextName();
				if (value.equals("id")) {
					id = reader.nextString();
				} else if (value.equals("main")) {
					main = reader.nextString();
				} else if (value.equals("description")) {
					description = reader.nextString();
				} else {
					reader.skipValue();
				}
			}
			reader.endObject();
		}
		reader.endArray();
	}

	private void readTempratureInformation(JsonReader reader)
			throws IOException {
		reader.beginObject();
		String temp;
		String mintemp;
		String maxtemp;
		String pressure;
		String sealevel;
		String groundlevel;
		String humidity;
		while (reader.hasNext()) {
			String value = reader.nextName();
			if (value.equals("temp")) {
				temp = reader.nextString();
			} else if (value.equals("temp_min")) {
				mintemp = reader.nextString();
			} else if (value.equals("temp_max")) {
				maxtemp = reader.nextString();
			} else if (value.equals("pressure")) {
				pressure = reader.nextString();
			} else if (value.equals("sea_level")) {
				sealevel = reader.nextString();
			} else if (value.equals("ground_level")) {
				groundlevel = reader.nextString();
			} else if (value.equals("humidity")) {
				humidity = reader.nextString();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
	}

	private void readWindInformation(JsonReader reader) throws IOException {
		reader.beginObject();
		String speed;
		String deg;
		while (reader.hasNext()) {
			String value = reader.nextName();
			if (value.equals("speed")) {
				speed = reader.nextString();
			} else if (value.equals("deg")) {
				deg = reader.nextString();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
	}

	private void readCloudSpeed(JsonReader reader) throws IOException {
		reader.beginObject();
		String all;
		while (reader.hasNext()) {
			String value = reader.nextName();
			if (value.equals("all")) {
				all = reader.nextString();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
	}

}
