package common.base.app.farmerfriend.Classes.Helper;

import java.util.*;

import common.base.app.farmerfriend.Classes.DTO.*;
import common.base.app.farmerfriend.Database.*;
import android.content.Context;

public class WeatherDatabaseHandler {

	public static DatabaseExecuter dbExecuter;

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public static String[] GetCityListToBind(Context context) {
		dbExecuter = new DatabaseExecuter(context);
		String query = "SELECT * FROM " + DatabaseHelper.TABLE_LOCATIONS;
		WeatherSharedDataHolder.LocationList = (List<LocationDTO>) (List) dbExecuter
				.getTableData(query, DatabaseHelper.TABLE_LOCATIONS);
		if (WeatherSharedDataHolder.LocationList != null) {
			List<String> allCityList = new ArrayList<String>();
			for (LocationDTO locationToAdd : WeatherSharedDataHolder.LocationList) {
				allCityList.add(locationToAdd.getLocationName());
			}
			return allCityList.toArray(new String[0]);
		}
		return null;
	}

	@SuppressWarnings("unchecked")
	public static HashMap<String, Integer> GetAvailableLocationTypes(
			Context context) {
		dbExecuter = new DatabaseExecuter(context);
		String query = "SELECT * FROM " + DatabaseHelper.TABLE_LOCATIONTYPES;
		@SuppressWarnings("rawtypes")
		List<LocationTypeDTO> allTypes = (List<LocationTypeDTO>) (List) dbExecuter
				.getTableData(query, DatabaseHelper.TABLE_LOCATIONTYPES);
		if (allTypes != null) {
			HashMap<String, Integer> allLocationTypes = new HashMap<String, Integer>();
			for (LocationTypeDTO locationTypeToAdd : allTypes) {
				allLocationTypes.put(locationTypeToAdd.getLocationType(),
						locationTypeToAdd.getLocationTypeID());
			}
			return allLocationTypes;
		}
		return null;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public static List<WeatherDetailsDTO> GetAvailableWeatherDetails(
			Date weatherDate, Context context) {
		dbExecuter = new DatabaseExecuter(context);
		String sqlQuery = "SELECT *  FROM "
				+ ITableDefination.TABLE_WEATHER_DETAILS
				+ " WHERE WeatherDate = " + weatherDate.toString();
		List<Object> dataToReturn = dbExecuter.getTableData(sqlQuery,
				ITableDefination.TABLE_WEATHER_DETAILS);
		if (dataToReturn.size() > 0) {
			WeatherSharedDataHolder.WeatherDetailsList = (List<WeatherDetailsDTO>) (List) (dataToReturn);
		} else {
			WeatherSharedDataHolder.WeatherDetailsList = new ArrayList<WeatherDetailsDTO>();
		}
		return WeatherSharedDataHolder.WeatherDetailsList;
	}
}
