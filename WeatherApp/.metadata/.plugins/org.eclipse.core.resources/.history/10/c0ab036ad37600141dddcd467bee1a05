package common.base.app.farmerfriend;

import java.io.*;
import java.lang.reflect.Field;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.*;

import common.base.app.farmerfriend.Classes.DTO.*;
import common.base.app.farmerfriend.Classes.Helper.*;
import common.base.app.farmerfriend.Classes.Parser.*;
import common.base.app.farmerfriend.Classes.Result.CurrentWeatherResult;
import common.base.app.farmerfriend.Database.DatabaseExecuter;
import android.support.v7.app.ActionBarActivity;
import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.*;
import android.widget.*;

public class ShowWeatherActivity extends ActionBarActivity {

	private static final String EXTRA_MESSAGE = "Extra_Message";
	@SuppressWarnings("unused")
	private static LocationDTO _weatherLocation;
	private IJsonParser _parser;
	private List<CurrentWeatherResult> _currentWeather;
	private static Boolean _presentAtLocal;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_show_weather);
		String value = getIntent().getStringExtra(EXTRA_MESSAGE);
		TimeZone.setDefault(TimeZone.getTimeZone("Asia/Calcutta"));
		if (WeatherSharedDataHolder.CityList != null
				&& WeatherSharedDataHolder.CityList.length > 0) {
			Boolean flagToBreak = false;
			for (int i = 0; i < WeatherSharedDataHolder.CityList.length; i++) {
				if (WeatherSharedDataHolder.CityList[i].equals(value)) {
					for (LocationDTO location : WeatherSharedDataHolder.LocationList) {
						if (location.getLocationName().equals(value)) {
							_weatherLocation = location;
							flagToBreak = true;
							ProcessWeatherApi(value);
							break;
						}
					}
				}
				if (flagToBreak)
					break;
			}
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.show_weather, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	private void ProcessWeatherApi(String locationName) {
		String url = "http://api.openweathermap.org/data/2.5/weather?q="
				+ locationName + "&units=metric";
		(new GetWeatherData()).execute(url);
		(new SaveCurrentWeatherData()).execute(_weatherLocation.LocationName);
	}

	private class GetWeatherData extends AsyncTask<String, String, String> {

		@SuppressWarnings({ "unchecked", "rawtypes" })
		@Override
		protected String doInBackground(String... params) {
			String location = params[0];
			if (VerificationHelper.IsWeatherDetailsAvailable(location,
					getBaseContext())) {
				_presentAtLocal = true;
			} else {
				_presentAtLocal = false;
				String urlString = params[0];
				InputStream in = null;
				try {
					URL url = new URL(urlString);
					HttpURLConnection connection = (HttpURLConnection) url
							.openConnection();
					in = new BufferedInputStream(connection.getInputStream());
				} catch (Exception e) {
					Log.e("Exception found ", e.getMessage());
				}
				if (in != null) {
					try {
						_parser = new CurrentWeatherParser();
						_currentWeather = (List) (_parser.readJsonStream(in));
					} catch (Exception e) {
					}
				}
			}
			return null;
		}

		@Override
		protected void onPreExecute() {

		}

		@Override
		protected void onPostExecute(String result) {
			if (_presentAtLocal)
				_currentWeather = ValidationHelper.convertToWeatherList();

			if (_currentWeather != null && _currentWeather.size() > 0) {
				WeatherUIHelper.showCurrentWeatherDataOnScreen(
						ShowWeatherActivity.this, _currentWeather);
			}
		}
	}

	private class SaveCurrentWeatherData extends
			AsyncTask<String, String, String> {

		protected void onPreExecute() {

		}

		protected void onPostExecute() {

		}

		@Override
		protected String doInBackground(String... params) {
			if (_currentWeather != null && _currentWeather.size() > 0) {
				for (CurrentWeatherResult recordToSave : _currentWeather) {
					DatabaseExecuter dbExecuter = new DatabaseExecuter(
							getBaseContext());
					if (_weatherLocation.getWeatherLocationID() != ""
							&& !_weatherLocation.getWeatherLocationID()
									.equalsIgnoreCase("0")) {
						dbExecuter.updateLocationForWeatherLocationID(
								recordToSave.getWeatherLocationId(),
								" LocationName " + "= '"
										+ _weatherLocation.getLocationName()
										+ "'");
					}
					dbExecuter.insertTableData(recordToSave,
							DatabaseExecuter.TABLE_WEATHER_DETAILS);
				}
			}
			return null;
		}
	}

}
