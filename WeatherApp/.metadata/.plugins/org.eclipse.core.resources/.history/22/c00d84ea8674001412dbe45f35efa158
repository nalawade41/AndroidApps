package common.base.app.farmerfriend.Database;

import java.util.*;

import common.base.app.farmerfriend.Classes.DTO.*;
import android.content.*;
import android.database.Cursor;
import android.database.sqlite.*;

public class DatabaseHelper extends SQLiteOpenHelper implements
		ITableDefination {

	public DatabaseHelper(Context context) {
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		DatabaseExecuter.createTables(db);
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// on upgrade drop older tables
		DatabaseExecuter.dropTables(db);
		// create new tables
		onCreate(db);
	}

	public long insertRecord(ContentValues values, String tableName) {
		
			SQLiteDatabase db = this.getWritableDatabase();
			return db.insert(tableName, null, values);
	}

	public List<Object> getRecordData(String sqlQuery, String tableName) {
		SQLiteDatabase db = this.getReadableDatabase();
		List<Object> dataToReturn = null;
		Cursor dataRead = db.rawQuery(sqlQuery, null);
		if (dataRead != null && dataRead.moveToFirst()) {
			if (tableName.equals(TABLE_LOCATIONS)) {
				dataToReturn = new ArrayList<Object>();
				int locationIDIndex = dataRead.getColumnIndex("LocationID");
				int locationLatiIndex = dataRead
						.getColumnIndex("LocationLatitude");
				int locationNameIndex = dataRead.getColumnIndex("LocationName");
				int locationLongiIndex = dataRead
						.getColumnIndex("LocationLongitude");
				int locationTypeIndex = dataRead
						.getColumnIndex("LocationTypeID");
				int dateAddedIndex = dataRead.getColumnIndex(ADDED_TIME_KEY);
				int geoNameIDIndex = dataRead.getColumnIndex("GeoNameID");
				do {
					Location dataRow = new Location();
					dataRow.setLocationID(dataRead.getInt(locationIDIndex));
					dataRow.setDateAdded(dataRead.getString(dateAddedIndex));
					dataRow.setLocationLatitude(dataRead
							.getDouble(locationLatiIndex));
					dataRow.setLocationLongitude(dataRead
							.getDouble(locationLongiIndex));
					dataRow.setLocationName(dataRead
							.getString(locationNameIndex));
					dataRow.setLocationTypeID(dataRead
							.getInt(locationTypeIndex));
					dataRow.setGeoNameID(dataRead.getString(geoNameIDIndex));
					dataToReturn.add(dataRow);
				} while (dataRead.moveToNext());
			}
			if (tableName.equals(TABLE_LOCATIONTYPES)) {
				dataToReturn = new ArrayList<Object>();
				int locationTypeIDIndex = dataRead
						.getColumnIndex("LocationTypeID");
				int locationTypeIndex = dataRead.getColumnIndex("LocationType");
				int dateAddedIndex = dataRead.getColumnIndex(ADDED_TIME_KEY);
				do {
					LocationType dataRow = new LocationType();
					dataRow.setDateAdded(dataRead.getString(dateAddedIndex));
					dataRow.setLocationTypeID(dataRead
							.getInt(locationTypeIDIndex));
					dataRow.setLocationType(dataRead
							.getString(locationTypeIndex));
					dataToReturn.add(dataRow);
				} while (dataRead.moveToNext());
			}
			if (tableName.equals(TABLE_WEATHER_DETAILS)) {
				dataToReturn = new ArrayList<Object>();
				int locationIDIndex = dataRead.getColumnIndex("LocationID");
				int weatherLocationIDIndex = dataRead
						.getColumnIndex("WeatherLocationID");
				int weatherDetailsIDIndex = dataRead
						.getColumnIndex("WeatherDetailsID");
				int dateAddedIndex = dataRead.getColumnIndex(ADDED_TIME_KEY);
				do {
					WeatherDetail dataRow = new WeatherDetail();
					dataRow.setLocationID(dataRead.getInt(locationIDIndex));
					dataRow.setDateAdded(dataRead.getString(dateAddedIndex));
					dataRow.setWeatherDetailsID(dataRead
							.getInt(weatherDetailsIDIndex));
					dataRow.setWeatherLocationID(dataRead
							.getString(weatherLocationIDIndex));
					dataToReturn.add(dataRow);
				} while (dataRead.moveToNext());
			}
		}
		return dataToReturn;
	}

	public void FirstRunDeletion(Context context) {
		context.deleteDatabase(DATABASE_NAME);
	}
}
